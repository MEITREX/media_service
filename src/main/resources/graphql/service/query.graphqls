type Query {
    """
    Returns the media records with the given IDs. Throws an error if a MediaRecord corresponding to a given ID
    cannot be found.

    üîí If the mediaRecord is associated with coursed the user must be a member of at least one of the courses.
    """
    mediaRecordsByIds(ids: [UUID!]!): [MediaRecord!]!
    """
    Returns the media records with the given IDs. Throws an error if a MediaRecord corresponding to a given ID
    cannot be found.

    ‚ö†Ô∏è This query is only accessible internally in the system and allows the caller to fetch contents without
    any permissions check and should not be called without any validation of the caller's permissions. ‚ö†Ô∏è
    """
    # ‚ö†Ô∏è BEFORE YOU CHANGE THIS: This query is used in the docprocai-service python graphql client. Before changing
    #    the signature of this query, you need to change the client for it to still function! ‚ö†Ô∏è
    _internal_noauth_mediaRecordsByIds(ids: [UUID!]!): [MediaRecord!]!
    """
    Like mediaRecordsByIds() returns the media records with the given IDs, but instead of throwing an error if an ID
    cannot be found, it instead returns NULL for that media record.

    üîí If the mediaRecord is associated with coursed the user must be a member of at least one of the courses.
    """
    findMediaRecordsByIds(ids: [UUID!]!): [MediaRecord]!
    """
    Returns all media records of the system.

    üîí The user must be a super-user, otherwise an exception is thrown.
    """
    mediaRecords: [MediaRecord!]! @deprecated(reason: "In production there should probably be no way to get all media records of the system.")
    """
    Returns all media records which the current user created.

    üîí If the mediaRecord is associated with coursed the user must be a member of at least one of the courses.
    """
    userMediaRecords: [MediaRecord!]!
    """
    Returns the media records associated the given content IDs as a list of lists where each sublist contains
    the media records associated with the content ID at the same index in the input list

    üîí If the mediaRecord is associated with courses the user must be a member of at least one of the courses.
    """
    mediaRecordsByContentIds(contentIds: [UUID!]!): [[MediaRecord!]!]!

    """
    Returns the media records associated the given content IDs as a list of lists where each sublist contains
    the media records associated with the content ID at the same index in the input list

    ‚ö†Ô∏è This query is only accessible internally in the system and allows the caller to fetch contents without
    any permissions check and should not be called without any validation of the caller's permissions. ‚ö†Ô∏è
    """
    _internal_noauth_mediaRecordsByContentIds(contentIds: [UUID!]!): [[MediaRecord!]!]!

    """
    Returns all media records for the given CourseIds

    üîí If the mediaRecord is associated with coursed the user must be a member of at least one of the courses.
    """
    mediaRecordsForCourses(courseIds: [UUID!]!): [[MediaRecord!]!]!

    """
    Returns all media records for the given CourseIds

    ‚ö†Ô∏è This query is only accessible internally in the system and allows the caller to fetch contents without
    any permissions check and should not be called without any validation of the caller's permissions. ‚ö†Ô∏è
    """
    _internal_noauth_mediaRecordsForCourses(courseIds: [UUID!]!): [[MediaRecord!]!]!

    """
    Returns all media records which were created by the users.
    """
    mediaRecordsForUsers(userIds: [UUID!]!): [[MediaRecord!]!]!

    """
    Returns the forum
    """
    forum(id: UUID!): Forum

    """
    Returns the forum of the course and creates new forum if it does not exist
    """
    forumByCourseId(id: UUID!): Forum

    """
    Returns thread for MediaRecord
    """
    threadsByMediaRecord(id: UUID!): [Thread!]!

    """
    Returns thread
    """
    thread(id: UUID!): Thread

    """
    Returns open threads
    """
    openQuestionByCourseId(id: UUID!): [Thread!]!
}