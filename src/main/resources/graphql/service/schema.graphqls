# schema file of the microservice

# defines data types, queries and mutations
# this can be done in a separate files as long as they are in this folder and
# end with .graphqls

type MediaRecord {
  """
  ID of the media record
  """
  id: UUID!
  """
  Ids of the courses this MediaRecord is associated with
  """
  courseIds: [UUID!]!
  """
  Name of the media record
  """
  name: String!
  """
  User ID of the creator of the media record.
  """
  creatorId: UUID!
  """
  Type of the media record
  """
  type: MediaType!
  """
  IDs of the MediaContents this media record is associated with
  """
  contentIds: [UUID!]!
  """
  Temporary upload url for the media record
  """
  uploadUrl: String!
  """
  Temporary download url for the media record
  """
  downloadUrl: String!
  """
  Temporary download url for the media record where, if the media record is uploaded in a non-standardized format, a
  converted version of that file is served.

  For documents, this is a PDF version of the document.

  May be NULL if no standardized version is available.
  """
  standardizedDownloadUrl: String
  """
  Temporary upload url for the media record which can only be used from within the system.
  (This is necessary because the MinIO pre-signed URLs cannot be changed, meaning we cannot use the same URL for both
  internal and external access because the hostname changes.)
  """
  internalUploadUrl: String!
  """
  Temporary download url for the media record which can only be used from within the system.
  (This is necessary because the MinIO pre-signed URLs cannot be changed, meaning we cannot use the same URL for both
  internal and external access because the hostname changes.)
  """
  internalDownloadUrl: String!

  """
  The progress data of the given user for this medium.
  """
  userProgressData: MediaRecordProgressData!
}

type MediaRecordProgressData {

  """
  Whether the medium has been worked on by the user.
  """
  workedOn: Boolean!
  """
  Date on which the medium was worked on by the user.
  This is null if the medium has not been worked on by the user.
  """
  dateWorkedOn: DateTime
}

input CreateMediaRecordInput {
  """
  Name of the media record. Cannot be blank, maximum length 255 characters.
  """
  name: String! @NotBlank @Size(max: 255)
  """
  Type of the media record.
  """
  type: MediaType!
  """
  IDs of the MediaContents this media record is associated with
  """
  contentIds: [UUID!]!
}

input UpdateMediaRecordInput {
  """
  ID of the media record which should be updated
  """
  id: UUID!
  """
  New name of the media record. Cannot be blank, maximum length 255 characters.
  """
  name: String! @NotBlank @Size(max: 255)
  """
  New type of the media record.
  """
  type: MediaType!
  """
  IDs of the MediaContents this media record is associated with
  """
  contentIds: [UUID!]!
}

"""
The type of the media record
"""
enum MediaType {
  VIDEO
  AUDIO
  IMAGE
  PRESENTATION
  DOCUMENT
  URL
}

type Forum {
  id: UUID!

  threads: [Thread]

  courseId: UUID!
}

type Thread {
  id: UUID!

  forum: Forum!

  creatorId: UUID!

  title: String!

  creationTimeStamp: DateTime

  posts: [Post]!
}


type InfoThread {
  id: UUID!

  forum: Forum!

  creatorId: UUID!

  title: String!

  creationTimeStamp: DateTime
}

type QuestionThread {
  id: UUID!

  forum: Forum!

  creatorId: UUID!

  title: String!

  creationTimeStamp: DateTime
}

type Post {
  id: UUID!

  title: String!

  content: String!

  creationTime: DateTime

  authorId: UUID!

  downvotedByUsers: [UUID]!

  upvotedByUsers: [UUID]!

  question: QuestionThread

  selectedAnswer: QuestionThread

  thread: Thread!
}

input InputForum {
  id: UUID!

  threads: [InputThread]

  courseId: UUID!
}

input InputThread {
  forum: InputForum!

  title: String!

  posts: [InputPost]
}


input InputInfoThread {
  forum: InputForum!

  title: String!
}

input InputQuestionThread {
  forum: InputForum!

  title: String!
}

input InputPost {
  id: UUID

  title: String!

  content: String!

  question: UUID

  selectedAnswer: UUID

  threadId: UUID!
}