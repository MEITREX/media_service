type Mutation {
    """
    Creates a new media record
    üîí The user must have the "course-creator" role to perform this action.
    üîí If the mediaRecord is associated with courses the user must be an administrator of all courses or a super-user.
    """
    createMediaRecord(input: CreateMediaRecordInput!): MediaRecord!
    """
    Updates an existing media record with the given UUID
    üîí If the mediaRecord is associated with courses the user must be an administrator of at least one of the courses.
    """
    updateMediaRecord(input: UpdateMediaRecordInput!): MediaRecord!
    """
    Deletes the media record with the given UUID
    üîí If the mediaRecord is associated with courses the user must be an administrator of at least one of the courses.
    """
    deleteMediaRecord(id: UUID!): UUID!
    """
    For a given MediaContent, sets the linked media records of it to the ones with the given UUIDs.
    This means that for the content, all already linked media records are removed and replaced by the given ones.
    üîí If the mediaRecord is associated with courses the user must be an administrator of at least one of the courses.
    """
    setLinkedMediaRecordsForContent(contentId: UUID!, mediaRecordIds: [UUID!]!): [MediaRecord!]!
    """
    Logs that a media has been worked on by the current user.
    See https://gits-enpro.readthedocs.io/en/latest/dev-manuals/gamification/userProgress.html

    Possible side effects:
    When all media records of a content have been worked on by a user,
    a user-progress event is emitted for the content.
    üîí If the mediaRecord is associated with courses the user must be a member of at least one of the courses.
    """
    logMediaRecordWorkedOn(mediaRecordId: UUID!): MediaRecord!

    """
    Add the MediaRecords with the given UUIDS to the Course with the given UUID.
    üîí If the mediaRecord is associated with courses the user must be an administrator of at least one of the courses.
    """
    setMediaRecordsForCourse(courseId: UUID!, mediaRecordIds: [UUID!]!): [MediaRecord!]!

    """
    create forum
    """
    createForum(courseId: UUID!): Forum

    """
    add user to forum
    """
    addUserToForum(forumId: UUID!): Forum

    """
    add user to forum for given courseId
    """
    addUserToForumCourse(courseId: UUID!): Forum

    """
    create question thread
    """
    createQuestionThread(thread: InputQuestionThread!): QuestionThread

    """
    create info thread
    """
    createInfoThread(thread: InputInfoThread!): InfoThread

    """
    adds post to a Thread
    """
    addPost(post: InputPost!): Post

    """
    upvotes the post by the user
    """
    upvotePost(postId: UUID!): Post

    """
    downvote the post by the user
    """
    downvotePost(postId: UUID!): Post

    """
    update post
    """
    updatePost(post: InputPost!): Post

    """
    delete post
    """
    deletePost(postId: UUID!): Post

    """
    delete thread
    """
    deleteThread(threadId: UUID!): Thread

    """
    add Thread to MediaRecord
    """
    addThreadToContent(threadContentReference: InputThreadContentReference!): ThreadContentReference

    """
    add Answer to QuestionThread
    """
    selectAnswer(postId: UUID!): QuestionThread!

    """
    Create a new SubmissionExercise.
    ‚ö†Ô∏è This query is only accessible internally in the system and allows the caller to create a Quiz without
    any permissions check and should not be called without any validation of the caller's permissions. ‚ö†Ô∏è
    """
    _internal_noauth_createSubmissionExercise(courseId: UUID!, assessmentId: UUID!, input: InputSubmissionExercise!): SubmissionExercise!

    """
    adds a task to an assessment
    """
    mutateSubmission(assessmentId: UUID!): SubmissionMutation!

    """
    creates a solution for an exercise and returns the solution
    """
    uploadSolution(solution: InputSubmissionSolution!): SubmissionSolution!

    """
    updates the result for a solution
    """
    updateResult(result: InputResult!): Result!

    """
    creates the upload an download links for a file for an exercise to upload data
    """
    createExerciseFile(name: String!, assessmentId: UUID!): File

    """
    create the upload and download links for a file for an solution to an exercise
    """
    createSolutionFile(name: String!, solutionId: UUID!, assessmentId: UUID!): File
}